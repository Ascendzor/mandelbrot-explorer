{"version":3,"sources":["WorkerManager.js","MandelLayer.js","constants.js","components/Share.js","components/Donate.js","components/Information.js","components/InformationBox.js","TheMap.js","Benchmark.js","registerServiceWorker.js","index.js","App.js"],"names":["PubSub","require","getTileKey","coords","x","y","z","join","theWorkers","Array","from","length","map","a","Worker","forEach","worker","onmessage","evt","publish","data","workerPointer","L","MandelbrotLayer","GridLayer","extend","createTile","done","tile","document","createElement","width","height","computeOption","Promise","resolve","reject","subscribe","eventName","loadedTile","imageData","postMessage","renderTile","then","getContext","putImageData","MandelLayer","MapLayer","withLeaflet","onClick","className","style","borderRadius","padding","paddingTop","fontSize","color","onClose","paddingBottom","textAlign","background","display","fontWeight","target","href","position","top","right","bounds","boundsSize","useState","center","zoom","viewport","setViewport","showSnackBar","setShowSnackBar","snackbarMessage","setSnackbarMessage","timeoutReference","setTimeoutReference","ShouldShowInformationBox","setShouldShowInformationBox","useEffect","hashState","window","location","hash","split","decodeURIComponent","JSON","parse","stringify","left","zIndex","InformationBox","bottom","verticalAlign","marginRight","Donate","toClipboard","clearTimeout","setTimeout","Information","Share","anchorOrigin","vertical","horizontal","open","ContentProps","message","Map","crs","Leaflet","CRS","Simple","onViewportChange","minZoom","tms","maxZoom","tileSize","rustWorker","jsWorker","testCase","rustData","counter","console","timeEnd","time","log","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","pathname","Benchmark","TheMap","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f2a4c899.chunk.js","sourcesContent":["const PubSub = require('pubsub-js');\n\nconst getTileKey = coords => {\n  return [coords.x, coords.y, coords.z].join(' ')\n}\n\nconst theWorkers = Array.from({length: 4}).map(a => new Worker('/workers.js'))\ntheWorkers.forEach(worker => {\n  worker.onmessage = evt => {\n    PubSub.publish('onTileLoad', evt.data)\n  }\n})\n\nlet tiles = {}\nlet workerPointer = 0\n\nexport const renderTile = ({coords, computeOption}) => new Promise((resolve, reject) => {\n  PubSub.subscribe('onTileLoad', (eventName, loadedTile) => {\n    const tileKey = getTileKey(coords)\n    const loadedTileKey = getTileKey(loadedTile.coords)\n    if(tileKey === loadedTileKey) {\n      return resolve(loadedTile.imageData)\n    }\n  })\n\n  theWorkers[workerPointer].postMessage({coords, computeOption})\n  workerPointer = (workerPointer+1) % theWorkers.length\n})","import { MapLayer, withLeaflet } from 'react-leaflet'\nimport L from 'leaflet'\nimport {tileSize} from './constants'\nimport {renderTile} from './WorkerManager'\n\nL.MandelbrotLayer = L.GridLayer.extend({\n  createTile: (coords, done) => {\n    const tile = document.createElement('canvas')\n    tile.width = tile.height = tileSize\n\n    // if(coords.x !== 0 || coords.y !== 0) return tile\n    // renderTile({coords, computeOption: (coords.x % 2 === 0) ? 'rust' : 'js'}).then(imageData => {\n    renderTile({coords, computeOption: 'rust'}).then(imageData => {\n      tile.getContext('2d').putImageData(imageData, 0, 0)\n      done(null, tile)\n    })\n    return tile\n  }\n})\n\nclass MandelLayer extends MapLayer {\n  createLeafletElement(a) {\n    return new L.MandelbrotLayer(a)\n  }\n}\n\nexport default withLeaflet(MandelLayer)\n","export const tileSize = 256\nexport const maxIterations = 50\nexport const antiAliasingSampleSize = 2\n","import React from 'react'\nimport {FaCamera} from 'react-icons/fa'\n\nexport default ({onClick}) => {\n  return <div className={'Share mapButton'} onClick={onClick} style={{\n    width: 80,\n    height: 80,\n    borderRadius: 10,\n    padding: 5,\n    paddingTop: 10,\n    fontSize: 12,\n    color: 'white'\n  }}>\n    Share\n    <FaCamera style={{\n      paddingTop: 6,\n      width: 50,\n      height: 50\n    }}/>\n  </div>\n}","import React from 'react'\nimport {FaBitcoin} from 'react-icons/fa'\n\nexport default ({onClick}) => {\n  return <div className={'Share mapButton'} onClick={onClick} style={{\n    width: 40,\n    height: 40,\n    borderRadius: 10,\n    padding: 10,\n    paddingTop: 6,\n    fontSize: 12,\n    color: 'white'\n  }}>\n    Donate\n    <FaBitcoin style={{\n      paddingTop: 1,\n      width: 30,\n      height: 30\n    }}/>\n  </div>\n}","import React from 'react'\nimport {FaInfo} from 'react-icons/fa'\n\nexport default ({onClick}) => {\n  return <div className={'Information mapButton'} onClick={onClick} style={{\n    width: 60,\n    height: 60,\n    borderRadius: 10,\n    padding: 5,\n    paddingTop: 5,\n    fontSize: 12,\n    color: 'white'\n  }}>\n    Information\n    <FaInfo style={{\n      paddingTop: 5,\n      width: 40,\n      height: 40\n    }}/>\n  </div>\n}","import React from 'react'\nimport {FaTimesCircle} from 'react-icons/fa'\nimport IconButton from '@material-ui/core/IconButton'\n\nexport default ({onClose}) => {\n  return <div className={'InformationBox'} style={{\n    width: 400,\n    borderRadius: 10,\n    padding: 10,\n    paddingBottom: 20,\n    fontSize: 16,\n    color: 'white',\n    textAlign: 'center',\n    background: 'rgba(40, 40, 40, .94)',\n    display: 'relative'\n  }}>\n    <div>\n      <p>Welcome</p>\n      <p>This is a map of the Mandelbrot Set. You can interact with this map like you do with Google Maps.</p>\n      <p>Pinch, zoom, scroll, drag all work.</p>\n      <hr />\n      <p>None of the imagery you see here was man-made.</p>\n      <p>The mathematical formula that generated this is:</p>\n      <p>Z = Z ² + C</p>\n      <hr />\n      <p>\n        How should you use this?\n      </p>\n      <p style={{fontWeight: 'bold', fontSize: 18}}>\n        <span style={{color: '#4A9FF4'}}>Explore </span>\n        <span style={{color: '#54AA00'}}>Appreciate </span>\n        <span style={{color: '#B20C54'}}>Share</span>\n      </p>\n      <hr />\n      <p>Here are resources where you can learn more</p>\n      <p>\n        <a className='link' target='_blank' href='https://www.youtube.com/watch?v=NGMRB4O922I'>How it is calculated mathematically</a>\n      </p>\n      <p>\n        <a className='link' target='_blank' href='https://www.youtube.com/watch?v=DKHucotq6J0&feature=youtu.be&t=69'>Humourous religious description</a>\n      </p>\n    </div>\n    <IconButton onClick={onClose} style={{position: 'absolute', top: 0, right: 0}}>\n      <FaTimesCircle style={{color: 'rgba(230, 230, 230, .5)'}}/>\n    </IconButton>\n  </div>\n}","import React, { useState, useEffect } from 'react'\nimport { Map } from 'react-leaflet'\nimport Leaflet from 'leaflet'\nimport MandelLayer from './MandelLayer'\nimport {tileSize} from './constants'\nimport Share from './components/Share'\nimport Donate from './components/Donate'\nimport Information from './components/Information'\nimport toClipboard from 'copy-text-to-clipboard'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport InformationBox from './components/InformationBox'\n\nconst bitcoinAddress = '12psUNxtiCdE26y6DH7hje3bRHwUBeTyaz'\n\nconst boundsSize = 4096\nconst bounds = [\n  [-boundsSize*3.5, -boundsSize*2],\n  [boundsSize*3.5, boundsSize*2]\n]\n\nexport default () => {\n  const [viewport, setViewport] = useState({\n    center: [0, -tileSize],\n    zoom: 0\n  })\n  const [showSnackBar, setShowSnackBar] = useState(false)\n  const [snackbarMessage, setSnackbarMessage] = useState('')\n  const [timeoutReference, setTimeoutReference] = useState(0)\n  const [ShouldShowInformationBox, setShouldShowInformationBox] = useState(true)\n\n  useEffect(() => {\n    const hashState = window.location.hash.split('#')[1]\n    if(hashState) {\n      const [center, zoom] = decodeURIComponent(hashState).split('₿')\n      setViewport({center: JSON.parse(center), zoom})\n    }\n  }, [])\n\n  useEffect(() => {\n    window.location.hash = JSON.stringify(viewport.center)+'₿'+viewport.zoom\n  }, [viewport])\n  \n  return <div className=\"Mandelbrot\">\n    {ShouldShowInformationBox && <div style={{position: 'absolute', left: 'calc(50% - 200px)', top: 50, zIndex: 1000}}>\n      <InformationBox onClose={() => setShouldShowInformationBox(false)}/>\n    </div>}\n    <div style={{\n      position: 'absolute',\n      right: 17,\n      bottom: 17,\n      zIndex: 1000\n    }}>\n      <div style={{display: 'inline-block', verticalAlign: 'bottom', marginRight: 10}}>\n        <Donate onClick={() => {\n          toClipboard(bitcoinAddress)\n\n          clearTimeout(timeoutReference)\n          \n          setTimeoutReference(setTimeout(() => setShowSnackBar(false), 5000))\n          setShowSnackBar(true)\n          setSnackbarMessage('BTC address copied to clipboard. Thank you.')\n        }} />\n      </div>\n      <div style={{display: 'inline-block', verticalAlign: 'bottom', marginRight: 10}}>\n        <Information onClick={() => setShouldShowInformationBox(!ShouldShowInformationBox)} />\n      </div>\n      <div style={{display: 'inline-block', verticalAlign: 'bottom'}}>\n        <Share onClick={() => {\n          toClipboard(decodeURIComponent(window.location.href))\n          clearTimeout(timeoutReference)\n\n          setTimeoutReference(setTimeout(() => setShowSnackBar(false), 5000))\n          setShowSnackBar(true)\n          setSnackbarMessage('Link copied to clipboard. Show people what you\\'ve found!')\n        }} />\n      </div>\n    </div>\n    <Snackbar\n      anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n      open={showSnackBar}\n      onClose={() => setShowSnackBar(false)}\n      ContentProps={{\n        'aria-describedby': 'message-id',\n      }}\n      width={100}\n      message={<span>{snackbarMessage}</span>}\n    />\n    <Map\n      style={{height: '100%'}}\n      crs={Leaflet.CRS.Simple}\n      bounds={bounds}\n      viewport={viewport}\n      onViewportChange={setViewport}\n      minZoom={0}\n      tms={true}\n      // onZoomStart={console}// onZoomStart={console}\n      // onClick={e => console.log('on click')}\n      // zoomstart={e => console.log('zoomstart')}\n      // onMovestart={e => console.log(e.target)}\n      // onMoveend={e => console.log(e)}\n    >\n      <MandelLayer\n        maxZoom={100}\n        tileSize={tileSize}\n      />\n    </Map>\n  </div>\n}","import React, {useEffect} from 'react'\n\nconst rustWorker = new Worker('/workers.js')\nconst jsWorker = new Worker('/workers.js')\n\n// http://localhost:3000/#[-77.94416987757012,-304.7122994116724]%E2%82%BF40\nconst testCase = {\n    // coords: {\n    //     x: -1308729360660,\n    //     y: 334767660538,\n    //     z: 40\n    // }\n    coords: {\n        x: -1,\n        y: 0,\n        z: 1\n    }\n    // -1292599, y: 332059, z: 20\n    // coords: {\n    //     x: -1292599,\n    //     y: 332059,\n    //     z: 20\n    // }\n}\nexport default () => {\n    useEffect(() => {\n        setTimeout(() => {\n            (async () => {\n                let rustData = null\n                await new Promise((resolve, reject) => {\n                    let counter = 0\n                    rustWorker.onmessage = evt => {\n                        counter++\n                        // if(counter === 100) console.timeEnd('rust')\n                        if(counter === 1) console.timeEnd('rust')\n\n                        resolve(evt.data.imageData)\n                    }\n                    console.time('rust')\n                    Array.from({length: 1}).forEach(() => rustWorker.postMessage(testCase))\n                    // Array.from({length: 100}).forEach(() => rustWorker.postMessage(testCase))\n                }).then(imageData => {\n                    rustData = imageData\n                })\n\n                await new Promise((resolve, reject) => {\n                    let counter = 0\n                    jsWorker.onmessage = evt => {\n                        counter++\n                        if(counter === 1) console.timeEnd('js')\n                        // if(counter === 100) console.timeEnd('js')\n\n                        resolve(evt.data.imageData)\n                    }\n                    console.time('js')\n                    Array.from({length: 100}).forEach(() => jsWorker.postMessage({\n                    // Array.from({length: 1}).forEach(() => jsWorker.postMessage({\n                        ...testCase,\n                        computeOption: 'js'\n                    }))\n                }).then(imageData => {\n                    if(imageData == rustData) console.log('they matched')\n                })\n            })()\n        }, 1000)\n    }, [])\n\n    return <div>\n        benchmark\n    </div>\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","import React from 'react';\nimport './App.css';\nimport TheMap from './TheMap'\nimport Benchmark from './Benchmark'\n\nexport default () => {\n  if(window.location.pathname === '/benchmark') {\n    return <div className=\"App\">\n      <div>\n        Do the benchmark here\n      </div>\n      <Benchmark />\n    </div>\n  }\n\n  return <div className=\"App\">\n    <TheMap />\n  </div>\n};\n"],"sourceRoot":""}